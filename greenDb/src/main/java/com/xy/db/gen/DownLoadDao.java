package com.xy.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xy.db.base.StringHashMapConverter;
import java.util.HashMap;

import com.xy.db.down.DownLoad;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD".
*/
public class DownLoadDao extends AbstractDao<DownLoad, Long> {

    public static final String TABLENAME = "DOWN_LOAD";

    /**
     * Properties of entity DownLoad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Down_id = new Property(0, Long.class, "down_id", true, "_id");
        public final static Property TaskId = new Property(1, Long.class, "taskId", false, "TASK_ID");
        public final static Property ServiceUrl = new Property(2, String.class, "serviceUrl", false, "SERVICE_URL");
        public final static Property LocalPath = new Property(3, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Progress = new Property(4, int.class, "progress", false, "PROGRESS");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Head = new Property(7, String.class, "head", false, "HEAD");
    }

    private final StringHashMapConverter headConverter = new StringHashMapConverter();

    public DownLoadDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: down_id
                "\"TASK_ID\" INTEGER," + // 1: taskId
                "\"SERVICE_URL\" TEXT," + // 2: serviceUrl
                "\"LOCAL_PATH\" TEXT," + // 3: localPath
                "\"PROGRESS\" INTEGER NOT NULL ," + // 4: progress
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"HEAD\" TEXT);"); // 7: head
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoad entity) {
        stmt.clearBindings();
 
        Long down_id = entity.getDown_id();
        if (down_id != null) {
            stmt.bindLong(1, down_id);
        }
 
        Long taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindLong(2, taskId);
        }
 
        String serviceUrl = entity.getServiceUrl();
        if (serviceUrl != null) {
            stmt.bindString(3, serviceUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(4, localPath);
        }
        stmt.bindLong(5, entity.getProgress());
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getStatus());
 
        HashMap head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, headConverter.convertToDatabaseValue(head));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoad entity) {
        stmt.clearBindings();
 
        Long down_id = entity.getDown_id();
        if (down_id != null) {
            stmt.bindLong(1, down_id);
        }
 
        Long taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindLong(2, taskId);
        }
 
        String serviceUrl = entity.getServiceUrl();
        if (serviceUrl != null) {
            stmt.bindString(3, serviceUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(4, localPath);
        }
        stmt.bindLong(5, entity.getProgress());
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getStatus());
 
        HashMap head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, headConverter.convertToDatabaseValue(head));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoad readEntity(Cursor cursor, int offset) {
        DownLoad entity = new DownLoad( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // down_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serviceUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localPath
            cursor.getInt(offset + 4), // progress
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : headConverter.convertToEntityProperty(cursor.getString(offset + 7)) // head
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoad entity, int offset) {
        entity.setDown_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setServiceUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProgress(cursor.getInt(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setHead(cursor.isNull(offset + 7) ? null : headConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoad entity, long rowId) {
        entity.setDown_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoad entity) {
        if(entity != null) {
            return entity.getDown_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoad entity) {
        return entity.getDown_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
